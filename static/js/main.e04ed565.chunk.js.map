{"version":3,"sources":["components/Movie.module.css","components/MoviesList.module.css","components/Movie.js","components/MoviesList.js","App.js","index.js"],"names":["module","exports","Movie","props","className","classes","movie","title","releaseDate","openingText","MovieList","movies","map","key","id","App","useState","setMovies","isLoading","setIsLoading","error","setError","fetchAgain","setFetchAgain","fetchMovieHandler","a","console","log","fetch","method","response","ok","Error","json","data","transformedMovie","results","movieData","episode_id","opening_crawl","release_date","message","useEffect","content","length","MoviesList","Fragment","onClick","ReactDOM","render","document","getElementById"],"mappings":"iIACAA,EAAOC,QAAU,CAAC,MAAQ,uB,gBCA1BD,EAAOC,QAAU,CAAC,cAAc,kC,wMCajBC,EAVD,SAACC,GACb,OACE,wBAAIC,UAAWC,IAAQC,OACrB,4BAAKH,EAAMI,OACX,4BAAKJ,EAAMK,aACX,2BAAIL,EAAMM,e,gBCWDC,EAfG,SAACP,GACjB,OACE,wBAAIC,UAAWC,IAAQ,gBACpBF,EAAMQ,OAAOC,KAAI,SAACN,GAAD,OAChB,kBAAC,EAAD,CACEO,IAAKP,EAAMQ,GACXP,MAAOD,EAAMC,MACbC,YAAaF,EAAME,YACnBC,YAAaH,EAAMG,mB,MCwFdM,MAhGf,WAEE,MAA0BC,mBAAS,IAAnC,mBAAML,EAAN,KAAaM,EAAb,KACA,EAAgCD,oBAAS,GAAzC,mBAAME,EAAN,KAAgBC,EAAhB,KACA,EAAsBH,mBAAS,MAA/B,mBAAMI,EAAN,KAAYC,EAAZ,KACA,EAAkCL,oBAAS,GAA3C,mBAAMM,EAAN,KAAiBC,EAAjB,KALa,SA0CEC,IA1CF,2EA0Cb,gCAAAC,EAAA,6DACEC,QAAQC,IAAI,sBACZR,GAAa,GAFf,kBAKyBS,MAAM,+BAA+B,CAACC,OAAO,QALtE,WAKQC,EALR,QAOeC,GAPf,sBAQU,IAAIC,MAAM,2BARpB,wBAWqBF,EAASG,OAX9B,QAWQC,EAXR,OAYQC,EAAmBD,EAAKE,QAAQxB,KAAI,SAAAyB,GACxC,MAAO,CACLvB,GAAIuB,EAAUC,WACd/B,MAAO8B,EAAU9B,MACjBE,YAAY4B,EAAUE,cACtB/B,YAAY6B,EAAUG,iBAG3BvB,EAAUkB,GACVhB,GAAa,GArBd,kDAuBEO,QAAQC,IAAR,MACAN,EAAS,KAAMoB,SAxBjB,2DA1Ca,sBAObC,qBAAU,WACRlB,MACA,CAACF,IA8DH,IAAIqB,EAAU,6CAWd,OAVGhC,EAAOiC,OAAS,IACjBD,EAAU,kBAACE,EAAD,CAAYlC,OAAQA,KAE7BS,IACDuB,EAAU,2BAAIvB,IAEbF,IACDyB,EAAU,6CAIV,kBAAC,IAAMG,SAAP,KACE,iCACE,4BAAQC,QAASvB,GAAjB,gBACA,4BAAQuB,QAvEd,WACExB,GAAc,KAsEV,UAEF,iCAEEoB,KCzFRK,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,W","file":"static/js/main.e04ed565.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"movie\":\"Movie_movie__K9PXP\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"movies-list\":\"MoviesList_movies-list__Fi9XK\"};","import React from 'react';\n\nimport classes from './Movie.module.css';\n\nconst Movie = (props) => {\n  return (\n    <li className={classes.movie}>\n      <h2>{props.title}</h2>\n      <h3>{props.releaseDate}</h3>\n      <p>{props.openingText}</p>\n    </li>\n  );\n};\n\nexport default Movie;\n","import React from 'react';\n\nimport Movie from './Movie';\nimport classes from './MoviesList.module.css';\n\nconst MovieList = (props) => {\n  return (\n    <ul className={classes['movies-list']}>\n      {props.movies.map((movie) => (\n        <Movie\n          key={movie.id}\n          title={movie.title}\n          releaseDate={movie.releaseDate}\n          openingText={movie.openingText}\n        />\n      ))}\n    </ul>\n  );\n};\n\nexport default MovieList;\n","import React, { useEffect, useState } from 'react';\n\nimport MoviesList from './components/MoviesList';\nimport './App.css';\n\nfunction App() {\n\n  const[movies,setMovies] = useState([]);\n  const[isLoading,setIsLoading] = useState(false);\n  const[error,setError]=useState(null);\n  const[fetchAgain,setFetchAgain] = useState(false);\n\n  useEffect(() => {\n    fetchMovieHandler();\n  },[fetchAgain]);\n\n  function fetchMovieClearHandler(){\n    setMovies([]);\n  }\n\n  function fetchMovieAgainHandler(){\n    setFetchAgain(true);\n  }\n\n  // function fetchMovieHandler(){\n\n  //   fetch('https://swapi.dev/api/films/',{\n  //     method:'GET'\n  //   }).then(response => {\n  //     console.log(response);\n  //     return response.json();\n  //   }).then(data => {\n  //     //translate \n  //     const transformMovies = data.results.map(movieData => {\n  //       return{\n  //         id: movieData.episode_id,\n  //         title: movieData.title,\n  //         openingText: movieData.opening_crawl,\n  //         releaseDate: movieData.release_date,\n  //       };\n  //     })\n      \n  //     setMovies(transformMovies);\n  //   })\n   \n  // }\n  \n  async function fetchMovieHandler(){\n    console.log(\"##################\")\n    setIsLoading(true);\n\n    try{\n    const response = await fetch('https://swapi.dev/api/films/',{method:'GET'});\n\n    if(!response.ok){\n      throw new Error('Something went wrong...');\n    }\n\n    const data = await response.json();\n    const transformedMovie = data.results.map(movieData => {\n      return {\n        id: movieData.episode_id,\n        title: movieData.title,\n        openingText:movieData.opening_crawl,\n        releaseDate:movieData.release_date\n      }; \n    }) \n   setMovies(transformedMovie);\n   setIsLoading(false);\n  }catch(error){\n    console.log(error);\n    setError(error.message);\n  }\n  }\n\n\n  let content = <p>Found no movie</p>\n  if(movies.length > 0){\n    content = <MoviesList movies={movies}/>\n  }\n  if(error){\n    content = <p>{error}</p>\n  }\n  if(isLoading){\n    content = <p>Loading......</p>\n  }\n\n  return (\n    <React.Fragment>\n      <section>\n        <button onClick={fetchMovieHandler}>Fetch Movies</button>\n        <button onClick={fetchMovieAgainHandler}>Clear</button>\n      </section>\n      <section>\n        {/* {isLoading && <MoviesList movies={movies} />} */}\n       {content}\n      </section>\n    </React.Fragment>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}